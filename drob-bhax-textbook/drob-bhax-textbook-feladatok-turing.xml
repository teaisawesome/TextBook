<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">

    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>
        <para>
            Végtelen ciklus, egy olyan "állatfajta" a programozás világában, amivel a kisgyerekeket riogatják az iskolákban.
            Jobb elkerülni, de akarva vagy akaratlanul néha bele-belefutunk. Ha még nem láttál végtelen ciklust, íme egy C nyelven:
        </para>
        <programlisting language="c"><![CDATA[            
    int main ()
    {
        for (;;);

        return 0;
    }
 ]]>
            </programlisting>
        <para>
            A fenti kódot a <prompt>gcc inf.c -o inf</prompt> parancsal fordítjuk, majd <prompt>./inf</prompt> -el futtatjuk.
            Ha szépen lefutott a <prompt>top</prompt> parancs segítségével megtudjuk nézni a CPU állapotát! 
            A futtatott programunk sorában tisztán látszik, hogy a CPU 100%-on pörög.
        </para>
        <para>
            Ha egy olyan végtelen ciklust szeretnénk, ahol a CPU terheltsége a 0%-hoz közeli, akkor a <prompt>sleep(seconds)</prompt> függvényt kell használunk a ciklusmagban.
            Minden egyes ciklus lefutásnál a programszál "altatva" van a sleep paraméteréül megadott x másodpercig, így elérve a 0% CPU állapotot.
        </para>
        <programlisting language="c">
        <![CDATA[
    #include <unistd.h>

    int main ()
    {
        for (;;)
        {
            sleep (1);
        }

        return 0;
    }
 ]]>
        </programlisting>
        <para>
            Minden magot 100%-on terhelni többszálaszított végtelen ciklussal tudunk.
            Ehhez a <prompt>#pragma omp parallel</prompt> utasítást kell alkalmaznunk a for ciklusra, majd a <prompt>gcc teszt-feladat.c -o teszt -fopenmp</prompt> parancssal fordítjuk.
            A <prompt>top</prompt> utasítással le tudjuk ellenőrizni, hogy valóban minden mag 100%-on pörög.
        </para>
        <programlisting language="c">
        <![CDATA[
    int main ()
    {
        #pragma omp parallel
        {
            for (;;);
        }

        return 0;
    }
 ]]>
        </programlisting>

    </section>        
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne vlgtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[Program T100
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]></programlisting>            
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>            
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.       
                     
        </para>
        <para>
            A lefagy vagy nem fagy le program lényegében arról szól, hogy képesek vagyunk e olyan programot írni, ami eldönti egy programról, hogy be fog-e fagyni.
            Alan Turing matematikus és programozó 1936 decemberében bebizonyította, hogy ezen program írása nem lehetséges. Technikailag egy kisebb programról el tudjuk dönteni, hogy
            van-e benne például egy végtelen ciklus, ami a program fagyásához vezethet. Azonban ha nagyobb és bonyolultabb programba gondolkodunk ez szinte lehetetlen.
        </para>
        <para>
            Talán a jövőben megoldható lesz ez a probléma, ki tudja.
        </para>

    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül!
        </para>
        <para>
            Számtalan olyan feladat vagy probléma létezik, ahol két változók kell felcserélni majd ezekkel dolgozni tovább.
            Programozókként az egyszerű s nagyszerű elvnek megfelelően 2 különböző módszert nézünk meg a változók felcserélésére.
        </para>
        <para>I. Segédváltozós csere:</para>
        <programlisting language="c">
        <![CDATA[
        #include <stdio.h>

        int main ()
        {
            int a = 99; int b = 45;

            int c = a;
            a = b;
            b = c;

            printf("A értéke: %d\n", a);
            printf("B értéke: %d\n", b);

            return 0;
        }
    ]]>
        </programlisting>
        <para>
        Rém egyszerű a történet.
        C segédváltozónak értékül adjuk magát az A értékét, majd az A értékét egyenlővé teszük a B-vel. Végül B értékét egyenlő lesz C értékével.
        </para>
        <para>II. Segédváltozó nélkül egy kis matekkal:</para>
        <programlisting language="c">
        <![CDATA[
    #include <stdio.h>

    int main ()
    {
        int a = 99; int b = 45;

        b = b - a;
        a = a + b;
        b = a - b;

        printf("A értéke: %d\n", a);
        printf("B értéke: %d\n", b);

        return 0;
    }
 ]]>
        </programlisting>
        <para>
            Egy kis összeadással és kivonással egyszerűen megoldható a két változó felcserélése, aki nem hiszi számolja ki.
        </para>
        <para>
            Videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
        </para>
    </section>                     

    <section>
        <title>Labdapattogás</title>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
            pattogtatás alatt, alább láthatod a videókon.)
        </para>
        <para>
            <emphasis role="strong">Ebben a feladatban Nagy Martin-t tutoráltam!</emphasis>
        </para>
        <para>
            Labda pattogtatásához elsőként a bejárandó területet kell definiálnunk a programban. 
            A bejárandó terület a terminál ablakunk X és Y koordinátái fogják meghatározni. 
            Ehhez felveszünk két konstans változót a <function>#define {VÁLTOZÓNÉV}</function> kulcsszó segítségével.
            Ez után szükség van egy <function>positionPrinting(int x, int y)</function> függvényre, ami a paraméterében átadott X és Y koordináták felhasználásával előállítja a labdakimenetet.
        </para>
        <programlisting language="c">
        <![CDATA[
    #include <math.h>
    #include <unistd.h>
    #include <stdio.h>
    #include <stdlib.h>

    #define WIDTH 78
    #define HEIGHT 22

    int positionPrinting(int x, int y)
    {
        int i;

        for(i=0; i<x; i++)
            printf("\n");

        for(i=0; i<y; i++)
            printf(" ");

        printf("⚽\n");

        return 0;
    }
 ]]>
        </programlisting>
        <para>
            Ha mindez megvan elkészíthetjük a <function>main</function> metódusunkat. Itt két hosszú egész típusú változót kell inicializálnunk.
            Ezekben tároljuk az aktuális X és Y koordinátákat. Majd írunk egy végtelen ciklust.
            A ciklus magjában először minden egyes lefutásnál töröljük a képernyőt a <function>system("clear")</function> függvényel.
            Ezután kirajzolhatjuk a labdánkat az előbb elkészített <function>positionPrinting(abs(HEIGHT-(x++%(HEIGHT*2))),abs(WIDTH-(y++%(WIDTH*2))))</function> függvény segítségével.
            Majd az <function>usleep(55000)</function> függvényel "altatjuk". Ezzel implementáljuk le a látszólag folyamatos labdamozgást.
        </para>
        <programlisting language="c">
        <![CDATA[
    int main()
    {
        long int x=0;

        long int y=0;

        while(1)
        {
            system("clear");
            
            positionPrinting(abs(HEIGHT-(x++%(HEIGHT*2))),abs(WIDTH-(y++%(WIDTH*2))));
            
            usleep(55000);
        }

        return 0;
    }
 ]]>
        </programlisting>

        <para>Ezen program után rádöbbenhetünk, hogy elég egy console és bármiféle egyszerűbb játékot leimplementálhatunk benne.
        Következőképp el tudnék képzelni egy console-os amőba vagy akasztófa játékot. Ha lesz rá időm meg is csinálom. :)</para>
        <para>
            Videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
        </para>
    </section>                     

    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában! 
        </para>
        <para>
            Az alábbi Linus Torvalds féle BogoMIPS egy program, ami segít a hibakeresésben illetve ellenőrizhető a számítógép számítási teljesítménye.
            Ellenőrizve az egymillió utasítás per másodperc végrehajtását végül visszaad egy indexszámot, ami jellemzi a processzorteljesítményt.
        </para>
        <programlisting language="c">
        <![CDATA[
    #include <time.h>
    #include <stdio.h>

    void delay (unsigned long long int loops)
    {
        unsigned long long int i;
        for (i = 0; i < loops; i++);
    }

    int main (void)
    {
        unsigned long long int loops_per_sec = 1;
        unsigned long long int ticks;

        printf ("Calibrating delay loop..");
        fflush (stdout);

        while ((loops_per_sec <<= 1))
        {
            ticks = clock ();
            delay (loops_per_sec);
            ticks = clock () - ticks;

            printf ("%llu %llu\n", ticks, loops_per_sec);

            if (ticks >= CLOCKS_PER_SEC)
            {
                loops_per_sec = (loops_per_sec / ticks) * CLOCKS_PER_SEC;

                printf ("ok - %llu.%02llu BogoMIPS\n", loops_per_sec / 500000,
                (loops_per_sec / 5000) % 100);

                return 0;
            }
        }

        printf ("failed\n");
        
        return -1;
    }
 ]]>
        </programlisting>
        
    </section>                     

    <section>
        <title>Helló, Google!</title>
        <para>
            Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét!
        </para>
        <para>
            Középiskolában a (leg)népszerűbbnek számít az az ember, akinek sok barátja és ismerőse van. Kissé közhely de igaz.
            Ezen példát továbbgondolva rájöhetünk a hasonlóságra, ha az interneten található weboldalak népszerűségét figyeljük meg.
            Népszerű, ha az adott weboldara sok-sok link mutat. Ezen népszerűségi rangsorolást a Google-féle PageRank algoritmus végzi.
        </para>
        <para>
            Az, hogy milyen "népszerű" egy adott oldal a PageRank algoritmus által hozzárendelt érték adja meg. Minél nagyobb annál népszerűbb.
            Továbbiakban tisztába kell lenni azzal, hogy egy weboldara kétféle link definiált. Vannak a rámutató (pointing) linkek, illetve a kimenő (outgoing) linkek.
            Pointing link az adott weboldara mutató linkek. Az outgoing linkek azon weboldal, ahova a weboldalunk mutat.
        </para>
        <figure>
            <title>PageRank algoritmus</title>
            <mediaobject>
                <imageobject>
                <imagedata fileref="/home/dekanyrobert/Dokumentumok/prog1/drob-bhax-textbook/PR.png" format="PNG"/>
                </imageobject>
            </mediaobject>
        </figure>
        <para>
            Elsőkörbe megírjuk a megjelenítő <function>kiir</function> függvényt. A paramétereként megkapott double vektoron végigiterál, majd kiiírja a PageRank értékeket az output-ra.
        </para>
        <programlisting language="c">
        <![CDATA[
            #include <stdio.h>
            #include <math.h>
            #include "std_lib_facilities.h"

            void kiir (vector<double> tomb)
            {
                int i;
                for (i=0; i < tomb.size(); i++)
                printf("PageRank [%d]: %lf\n", i, tomb[i]);
            }
        ]]>
        </programlisting>
        <para>
            <function>tavolsag</function> függvényt a paraméterben megkapott két vectorból számol egy közelítő távolságértéket.
            Ezt az értéket fogjuk vizsgálni a továbbiakban. Ha ez az érték közelíti vagy nagyobb a 0.00001 akkor nincs értelme tovább iterálni az a PR értékeket.
        </para>
        <programlisting language="c">
        <![CDATA[
            double tavolsag(vector<double> pagerank,vector<double> pagerank_temp)
            {
                double tav = 0.0;
                int i;
                for(i=0;i < pagerank.size();i++)
                tav +=abs(pagerank[i] - pagerank_temp[i]);
                return tav;
            }
        ]]>
        </programlisting>
        <para>
            A main függvényben történik a program lényegi része. Elsőként deklarálunk egy 4x4-es mátrixot. Ebbe lesz eltárolva a mutató linkek szerinti értékek amikkel dolgozni fogunk.
            Egy PR vektorban fogjuk eltárolni az épp aktuális PageRank értékeket. A PRv vektorban az egyes iterációknál meghatározott PageRank értékek. Alap esetben mind 1/4, mert 4 weblapunk van.
            Egy végtelen ciklusban fogjuk végrehajtani az egyes iterációs lépéseket. Minden iterációban végigmegyünk a PR illetve a PRv elemeken és mátrixszorzással kiszámoltatjuk a PageRank értékeket.
            Ezeket a lépéseket addig ismételgetjük, amíg a <function>tavolsag</function> függvény vissza nem tér a megfelelő értékkel. A végén pedig a <function>kiíír</function> -el kiiratunk.
        </para>
        <programlisting language="c">
        <![CDATA[
            int main(void)
            {
            double L[4][4] =
            {
                {0.0, 0.0, 1.0 / 3.0, 0.0},
                {1.0, 1.0 / 2.0, 1.0 / 3.0, 1.0},
                {0.0, 1.0 / 2.0, 0.0, 0.0},
                {0.0, 0.0, 1.0 / 3.0, 0.0}
            };

            vector<double> PR = {0.0, 0.0, 0.0, 0.0};
            vector<double> PRv = {1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0};

            long int i,j,h;
            i=0; j=0; h=5;

            for (;;)
            {
                for(i=0;i<4;i++)
                PR[i] = PRv[i];

                for (i=0;i<4;i++)
                {
                    double temp=0;

                    for (j=0;j<4;j++)
                        temp+=L[i][j]*PR[j];

                    PRv[i]=temp;
                }

                if ( tavolsag(PR,PRv) < 0.00001)
                break;
            }

            kiir (PR);

            return 0;

            }
        ]]>
        </programlisting>
        
    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>
        <para>
            <emphasis role="strong">Ebben a feladatban Nagy Martin-t tutoráltam!</emphasis>
        </para>
        <para>
            Bizonyára mindenki hallott már az prímek fogalmáról. Ezek olyan számok amelyek 1-el és önmagukkal oszthatóak csak.
            Az ikerprímek ezen prímszámokból vett prímek, amelyeknek különbsége kettő. 
            A prímszámok olyan számok, melyek csak önmagukkal és eggyel osztva nem adnak maradékot. Az iker-
            prímek pedig olyan príszmámok, melyek különbsége kettő.
        </para>
        <para> 
            A feladatunk a Brun tétel értelmezéséről és felhasználásáról szól.
            A Brun tétel kimondja, hogy az ikerprímszámok reciprokát ha elkezdjük összeadogatni akkor az így kapott sor egy Brun-konstanshoz fog konvergálni.
            Ezen tétel mentél elkészítjük programunkat Matlabban majd ábrázoljuk.
        </para>
        <programlisting language="r">
        <![CDATA[
            #   Copyright (C) 2019  Dr. Norbert Bátfai, nbatfai@gmail.com
            #
            #   This program is free software: you can redistribute it and/or modify
            #   it under the terms of the GNU General Public License as published by
            #   the Free Software Foundation, either version 3 of the License, or
            #   (at your option) any later version.
            #
            #   This program is distributed in the hope that it will be useful,
            #   but WITHOUT ANY WARRANTY; without even the implied warranty of
            #   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            #   GNU General Public License for more details.
            #
            #   You should have received a copy of the GNU General Public License
            #   along with this program.  If not, see <http://www.gnu.org/licenses/>

            library(matlab)

            stp <- function(x){

                primes = primes(x)
                diff = primes[2:length(primes)]-primes[1:length(primes)-1]
                idx = which(diff==2)
                t1primes = primes[idx]
                t2primes = primes[idx]+2
                rt1plust2 = 1/t1primes+1/t2primes
                return(sum(rt1plust2))
            }

            x=seq(13, 1000000, by=10000)
            y=sapply(x, FUN = stp)
            plot(x,y,type="b")
        ]]>
        </programlisting>
        <para>
            A function(X) függvény a prímeken végigiterál. Megnézi a külöbségüket, majd ha az kettő akkor eltárolja a két ikerprímszámot. Ezután összeadjuk a számokat majd felhasználjuk.
            Végén pedig a plot parancssal megrajzoltatjuk a grafikont.
        </para>
        <figure>
            <title>Bátfai Tanár úr ábrája a Brun-tétel abrázolásáról.</title>
            <mediaobject>
                <imageobject>
                <imagedata fileref="BrunKorok.png" format="PNG"/>
                </imageobject>
            </mediaobject>
        </figure>
        
    </section>
    
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <para>
            Írj R szimulációt a Monty Hall problémára!
        </para>
        <programlisting language="r">
        <![CDATA[
    #   An illustration written in R for the Monty Hall Problem 
    #   Copyright (C) 2019  Dr. Norbert Bátfai, nbatfai@gmail.com
    #
    #   This program is free software: you can redistribute it and/or modify
    #   it under the terms of the GNU General Public License as published by
    #   the Free Software Foundation, either version 3 of the License, or
    #   (at your option) any later version.
    #
    #   This program is distributed in the hope that it will be useful,
    #   but WITHOUT ANY WARRANTY; without even the implied warranty of
    #   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    #   GNU General Public License for more details.
    #
    #   You should have received a copy of the GNU General Public License
    #   along with this program.  If not, see <http://www.gnu.org/licenses/>
    #
    #   https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan
    # 

    kiserletek_szama=10000000
    kiserlet = sample(1:3, kiserletek_szama, replace=T)
    jatekos = sample(1:3, kiserletek_szama, replace=T)
    musorvezeto=vector(length = kiserletek_szama)

    for (i in 1:kiserletek_szama) {

        if(kiserlet[i]==jatekos[i]){
        
            mibol=setdiff(c(1,2,3), kiserlet[i])
        
        }else{
        
            mibol=setdiff(c(1,2,3), c(kiserlet[i], jatekos[i]))
        
        }

        musorvezeto[i] = mibol[sample(1:length(mibol),1)]

    }

    nemvaltoztatesnyer= which(kiserlet==jatekos)
    valtoztat=vector(length = kiserletek_szama)

    for (i in 1:kiserletek_szama) {

        holvalt = setdiff(c(1,2,3), c(musorvezeto[i], jatekos[i]))
        valtoztat[i] = holvalt[sample(1:length(holvalt),1)]
        
    }

    valtoztatesnyer = which(kiserlet==valtoztat)


    sprintf("Kiserletek szama: %i", kiserletek_szama)
    length(nemvaltoztatesnyer)
    length(valtoztatesnyer)
    length(nemvaltoztatesnyer)/length(valtoztatesnyer)
    length(nemvaltoztatesnyer)+length(valtoztatesnyer)

 ]]>
        </programlisting>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan">https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan</link>
        </para>
        <para>
            Megoldás később!
        </para>
    </section>

</chapter>                
