<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>A Mandelbrot halmaz</title>
        <para>
            <emphasis role="strong">Ebben a feladatban Nagy Martin tutorált engem!</emphasis>
        </para>
        <para>
                A matematikában a Mandelbrot-halmaz azon c komplex számokból áll (a „komplex számsík” azon pontjainak mértani helye, halmaza),
                melyekre az alábbi (komplex szám értékű)
                x<subscript>n</subscript> rekurzív sorozat: 
        </para>
        <para>
            x<subscript>1</subscript>:= c 
        </para>
        <para>x<subscript>n+1</subscript>:=(x<subscript>n</subscript>)<superscript>2</superscript> + c</para>
        <para>
            nem tart végtelenbe, azaz abszolút értékben (hosszára nézve) korlátos.
            Ez a komplex számokon egy nevezetes fraktálalakzatot formál. A továbbiakban ezt fogjuk leimplementálni C++ nyelven.
         </para>
        <para>
            Elősször szükség van egy <function>Makefile</function>-ra, ami a .cpp file-ből előállítja a megfelelő kimenetet.
            Jelen esetben létrehozza az output-ot és a képet. Íme így néz ki a Makefile:
        </para>
         <programlisting language="c">
        <![CDATA[
    all: mandelbrot clean

    mandelbrot.o: mandelbrot.cpp
        @g++ -c mandelbrot.cpp `libpng-config --cflags`

    mandelbrot: mandelbrot.o
        @g++ -o mandelbrot mandelbrot.o `libpng-config --ldflags`

    clean:
        @rm -rf *.o
        @./mandelbrot
        @rm -rf mandelbrot
 ]]>
        </programlisting>
        <para></para>
        <para>Ahhoz, hogy előállíthassuk a képünket szükség van a png++/png.hpp header file-ra. Ha ez megvan, akkor a <function>GeneratePNG(int tomb[N][M])</function>
        eljárás fogja legenerálni a <function>kimenet.png</function> állományt. Ezt ugy teszi meg, hogy az előállítanó kép mérete fix 500x500-as képpontú. 
        Egy forciklus végigmegy az eljárás paraméterében átadott mátrixon, majd pixelről pixelre színez az értékek alapján. A paraméterként átadott mátrix a Mandelbrot-halmaz 
        a komplex számsíkon vett pontjait tartalmazza.
        </para>
        <programlisting language="c">
        <![CDATA[
            void GeneratePNG( int tomb[N][M])
            {
                png::image< png::rgb_pixel > image(N, M);
                for (int x = 0; x < N; x++)
                {
                    for (int y = 0; y < M; y++)
                    {
                        image[x][y] = png::rgb_pixel(tomb[x][y], tomb[x][y], tomb[x][y]);
                    }
                }
                image.write("kimenet.png");
            }
        ]]>
        </programlisting>
        <para>Létrehozunk egy Komplex nevű struktúrát majd a <function>re</function> és <function>in</function> 
        mezőkben el fogjuk tárolni a komplex számunk halmazán vett valós és képzetes egységeket.</para>
        <programlisting language="c">
        <![CDATA[
            struct Komplex
            {
                double re, im;
            };
        ]]>
        </programlisting>
        <para>
            A <function>main()</function> függvénybe van megírva a a Mandelbrot-halmaz algoritmusa.
        </para>
        <programlisting language="c">
        <![CDATA[
        /*
        * Program: Mandelbrot halmaz
        * Dátum: 2014. február. 26.
        * Tutor: Szabó Attila
        * Tutoriált: Tuza József
        */

        #include <png++/png.hpp>

        #define N 500
        #define M 500
        #define MAXX 0.7
        #define MINX -2.0
        #define MAXY 1.35
        #define MINY -1.35

        void GeneratePNG( int tomb[N][M])
        {
            png::image< png::rgb_pixel > image(N, M);
            for (int x = 0; x < N; x++)
            {
                for (int y = 0; y < M; y++)
                {
                    image[x][y] = png::rgb_pixel(tomb[x][y], tomb[x][y], tomb[x][y]);
                }
            }
            image.write("kimenet.png");
        }

        struct Komplex
        {
            double re, im;
        };

        int main()
        {
            int tomb[N][M];

            int i, j, k;

            double dx = (MAXX - MINX) / N;
            double dy = (MAXY - MINY) / M;

            struct Komplex C, Z, Zuj;

            int iteracio;

            for (i = 0; i < M; i++)
            {
                for (j = 0; j < N; j++)
                {
                    C.re = MINX + j * dx;
                    C.im = MAXY - i * dy;

                    Z.re = 0;
                    Z.im = 0;
                    iteracio = 0;

                    while(Z.re * Z.re + Z.im * Z.im < 4 && iteracio++ < 255)
                    {
                        Zuj.re = Z.re * Z.re - Z.im * Z.im + C.re;
                        Zuj.im = 2 * Z.re * Z.im + C.im;
                        Z.re = Zuj.re;
                        Z.im = Zuj.im;
                    }

                    tomb[i][j] = 256 - iteracio;
                }
            }

            GeneratePNG(tomb);

            return 0;
        }

        ]]>
        </programlisting>
    </section>        
        
    <section>
        <title>A Mandelbrot halmaz a <filename>std::complex</filename> osztállyal</title>
        <para>
            Lényegében ugyanaz, mint a felső implementáció, viszont míg ott mi irtunk egy külön struktúrát a Komplex számok kezelésére,
            itt a már meglévő std::complex osztállyal fogunk dolgozni illetve az ő metódusaival. Cpp kód kicsit átírva <function>std:complex</function> osztályra.    
        </para>
        <programlisting language="c">
        <![CDATA[
            /*
            * Program: Mandelbrot halmaz komplex osztállyal
            * Dátum: 2014. március. 5.
            * A feladatot Szabó Attila és Tuza József által készített alapfeladat alapján
            * Dalmadi Zoltán módosította
            */

            #include <png++/png.hpp>
            #include <complex>

            const int N = 500;
            const int M = 500;
            const double MAXX = 0.7;
            const double MINX = -2.0;
            const double MAXY = 1.35;
            const double MINY = -1.35;

            void GeneratePNG(const int tomb[N][M])
            {
                png::image< png::rgb_pixel > image(N, M);
                for (int x = 0; x < N; x++)
                {
                    for (int y = 0; y < M; y++)
                    {
                        image[x][y] = png::rgb_pixel(tomb[x][y], tomb[x][y], tomb[x][y]);
                    }
                }
                image.write("kimenet.png");
            }

            int main()
            {
                int tomb[N][M];

                double dx = (MAXX - MINX) / N;
                double dy = (MAXY - MINY) / M;

                std::complex<double> C, Z, Zuj;

                int iteracio;

                for (int i = 0; i < M; i++)
                {
                    for (int j = 0; j < N; j++)
                    {
                        C.real(MINX + j * dx);
                        C.imag(MAXY - i * dy);

                        Z = 0;
                        iteracio = 0;

                        while(abs(Z) < 2 && iteracio++ < 255)
                        {
                            Zuj = Z*Z+C;
                            Z = Zuj;
                        }

                        tomb[i][j] = 256 - iteracio;
                    }
                }

                GeneratePNG(tomb);

                return 0;
            }

        ]]>
        </programlisting>
    </section>        
                
    <section>
        <title>Biomorfok</title>
        <para>
        </para>
        <programlisting language="c">
        <![CDATA[
            // Verzio: 3.1.3.cpp
            // Forditas:
            // g++ 3.1.3.cpp -lpng -O3 -o 3.1.3
            // Futtatas:
            // ./3.1.3 bmorf.png 800 800 10 -2 2 -2 2 .285 0 10
            // Nyomtatas:
            // a2ps 3.1.3.cpp -o 3.1.3.cpp.pdf -1 --line-numbers=1  --left-footer="BATF41 HAXOR STR34M" --right-footer="https://bhaxor.blog.hu/" --pro=color
            // ps2pdf 3.1.3.cpp.pdf 3.1.3.cpp.pdf.pdf
            // 
            // BHAX Biomorphs
            // Copyright (C) 2019
            // Norbert Batfai, batfai.norbert@inf.unideb.hu
            //
            //  This program is free software: you can redistribute it and/or modify
            //  it under the terms of the GNU General Public License as published by
            //  the Free Software Foundation, either version 3 of the License, or
            //  (at your option) any later version.
            //
            //  This program is distributed in the hope that it will be useful,
            //  but WITHOUT ANY WARRANTY; without even the implied warranty of
            //  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            //  GNU General Public License for more details.
            //
            //  You should have received a copy of the GNU General Public License
            //  along with this program.  If not, see <https://www.gnu.org/licenses/>.
            //
            // Version history
            //
            // https://youtu.be/IJMbgRzY76E
            // See also https://www.emis.de/journals/TJNSA/includes/files/articles/Vol9_Iss5_2305--2315_Biomorphs_via_modified_iterations.pdf
            //

            #include <iostream>
            #include "png++/png.hpp"
            #include <complex>

            int
            main ( int argc, char *argv[] )
            {

                int szelesseg = 1920;
                int magassag = 1080;
                int iteraciosHatar = 255;
                double xmin = -1.9;
                double xmax = 0.7;
                double ymin = -1.3;
                double ymax = 1.3;
                double reC = .285, imC = 0;
                double R = 10.0;

                if ( argc == 12 )
                {
                    szelesseg = atoi ( argv[2] );
                    magassag =  atoi ( argv[3] );
                    iteraciosHatar =  atoi ( argv[4] );
                    xmin = atof ( argv[5] );
                    xmax = atof ( argv[6] );
                    ymin = atof ( argv[7] );
                    ymax = atof ( argv[8] );
                    reC = atof ( argv[9] );
                    imC = atof ( argv[10] );
                    R = atof ( argv[11] );

                }
                else
                {
                    std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d reC imC R" << std::endl;
                    return -1;
                }

                png::image < png::rgb_pixel > kep ( szelesseg, magassag );

                double dx = ( xmax - xmin ) / szelesseg;
                double dy = ( ymax - ymin ) / magassag;

                std::complex<double> cc ( reC, imC );

                std::cout << "Szamitas\n";

                // j megy a sorokon
                for ( int y = 0; y < magassag; ++y )
                {
                    // k megy az oszlopokon

                    for ( int x = 0; x < szelesseg; ++x )
                    {

                        double reZ = xmin + x * dx;
                        double imZ = ymax - y * dy;
                        std::complex<double> z_n ( reZ, imZ );

                        int iteracio = 0;
                        for (int i=0; i < iteraciosHatar; ++i)
                        {

                            z_n = std::pow(z_n, 3) + cc;
                            //z_n = std::pow(z_n, 2) + std::sin(z_n) + cc;
                            if(std::real ( z_n ) > R || std::imag ( z_n ) > R)
                            {
                                iteracio = i;
                                break;
                            }
                        }

                        kep.set_pixel ( x, y,
                                        png::rgb_pixel ( (iteracio*20)%255, (iteracio*40)%255, (iteracio*60)%255 ));
                    }

                    int szazalek = ( double ) y / ( double ) magassag * 100.0;
                    std::cout << "\r" << szazalek << "%" << std::flush;
                }

                kep.write ( argv[1] );
                std::cout << "\r" << argv[1] << " mentve." << std::endl;

            }

        ]]>
        </programlisting>
        <para>
            A biomorf példákon végégmenve úgy tapasztaljuk, hogy a logikája hasonló a Mandelbrot halmaz kódjához így egy kis átalakítással létrehozható a biomorf.
            Mi az a biomorf? Egy elő szervezetre (pl. baktériumra, egysejtűre) hasonlító forma vagy modell.
            Nem feltétlen jelent elő organizmust.
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>                        
    </section>                     

    <section>
        <title>A Mandelbrot halmaz CUDA megvalósítása</title>
        <para>
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
        </para>
    </section>                     

    <section>
        <title>Mandelbrot nagyító és utazó C++ nyelven</title>
        <para>
            Építs GUI-t a Mandelbrot algoritmusra, lehessen egérrel nagyítani egy területet, illetve egy pontot
            egérrel kiválasztva vizualizálja onnan a komplex iteréció bejárta z<subscript>n</subscript> komplex számokat!
        </para>
        <para>
            Ebben a megoldásban a GUI létrehozására és kezelésére SFML grafikus library-t használok.
            Ezt a csomagot telepítjük a <function>sudo apt-get install libsfml-dev</function> parancssal.
            Logika ugyanaz, mint a korábbi Mandelbrot os példáknál.
            <function>void generate_mandelbrot_set(sf::VertexArray vertexarray, int pixel_shift_x, int pixel_shift_y, int precision, float zoom)</function>
            függvény fogja legenerálni a MBH_t egy Vertex array segítségével illetve mindig az aktuális paraméterekként átadott értékek alapján.
            Pl. Ha zoom történik, akkor ujra meghívódik a függvény az éppen aktuális MBH részeként.
        </para>
        <programlisting language="c">
        <![CDATA[
            // Forrás: https://github.com/SullyChen/Mandelbrot-Set-Plotter


            #include "SFML/Graphics.hpp"

            //resolution of the window
            const int width = 1280;
            const int height = 720;

            //used for complex numbers
            struct complex_number
            {
                long double real;
                long double imaginary;
            };

            //mandelbrot komplex alapján legenerál egy mandelbrot halmazt
            void generate_mandelbrot_set(sf::VertexArray& vertexarray, int pixel_shift_x, int pixel_shift_y, int precision, float zoom)
            {
                #pragma omp parallel for
                for(int i = 0; i < height; i++)
                {
                    for (int j = 0; j < width; j++)
                    {
                        //scale the pixel location to the complex plane for calculations
                        long double x = ((long double)j - pixel_shift_x) / zoom;
                        long double y = ((long double)i - pixel_shift_y) / zoom;
                        complex_number c;
                        c.real = x;
                        c.imaginary = y;
                        complex_number z = c;
                        int iterations = 0; //keep track of the number of iterations
                        for (int k = 0; k < precision; k++)
                        {
                            complex_number z2;
                            z2.real = z.real * z.real - z.imaginary * z.imaginary;
                            z2.imaginary = 2 * z.real * z.imaginary;
                            z2.real += c.real;
                            z2.imaginary += c.imaginary;
                            z = z2;
                            iterations++;
                            if (z.real * z.real + z.imaginary * z.imaginary > 4)
                                break;
                        }
                        //color pixel based on the number of iterations
                        if (iterations < precision / 4.0f)
                        {
                            vertexarray[i*width + j].position = sf::Vector2f(j, i);
                            sf::Color color(iterations * 255.0f / (precision / 4.0f), 0, 0);
                            vertexarray[i*width + j].color = color;
                        }
                        else if (iterations < precision / 2.0f)
                        {
                            vertexarray[i*width + j].position = sf::Vector2f(j, i);
                            sf::Color color(0, iterations * 255.0f / (precision / 2.0f), 0);
                            vertexarray[i*width + j].color = color;
                        }
                        else if (iterations < precision)
                        {
                            vertexarray[i*width + j].position = sf::Vector2f(j, i);
                            sf::Color color(0, 0, iterations * 255.0f / precision);
                            vertexarray[i*width + j].color = color;
                        }
                    }
                }
            }
        ]]>
        </programlisting>
        <para>
            A <function>main()</function> metódusba kezeljük le a GUI generálását. Először is <function>sf::</function> ablaknak beállítunk címet, ablakméretet stb.
            Ezután a default értékekkel (zoom, precision, x_shift, y_shift) legeneráltatjuk a MBH-t a <function> generate_mandelbrot_set(...)</function> függvényel.
            Ameddig az ablak nyitott állapotba van addig két eseményt figyel.
            1. Ha rákattintunk az X gombra, akkor zárja be az ablakot. 2. Ha bal gombbal belekattintunk a MBH-ba, akkor az átadott értékek segítségével újra legeneráltatja a MBH-t 2X nagyítással.
        </para>
        <programlisting language="c">
        <![CDATA[

            int main()
            {
                sf::String title_string = "Mandelbrot Set Plotter"; //ablak címe
                sf::RenderWindow window(sf::VideoMode(width, height), title_string); //ablak objektum(létrehozza az ablakot a megadott méretekkel és címmel)
                window.setFramerateLimit(30); //frissített ablak/s vagy ilyesmi
                sf::VertexArray pointmap(sf::Points, width * height);
                

                //értékek inicializálása
                float zoom = 300.0f;
                int precision = 100;
                int x_shift = width / 2;
                int y_shift = height / 2;
                
                //legenerálja a mbh-t
                generate_mandelbrot_set(pointmap, x_shift, y_shift, precision, zoom);
                
                
                /**
                * 
                * 
                * 
                * 
                * */
                while (window.isOpen())
                {

                    //ciklikusan figyeli az előforduló különböző event-eket, ha egy olyan esemény következik be, hogy rákattolunk az X gombra, akkor bezárja az ablakot
                    sf::Event event;
                    while (window.pollEvent(event))
                    {
                        if (event.type == sf::Event::Closed)
                            window.close();
                    }
                    
                    //ha a bal egérgommbal kattintunk, akkor az egér helyére nagyít az alábbi algoritmus segítségével. Minden nagyítás után újra legenerálja a mbh-t.
                    //zoom into area that is left clicked
                    if (sf::Mouse::isButtonPressed(sf::Mouse::Left))
                    {
                        sf::Vector2i position = sf::Mouse::getPosition(window);
                        x_shift -= position.x - x_shift;
                        y_shift -= position.y - y_shift;
                        zoom *= 2;
                        precision += 200;
                        
                        #pragma omp parallel for
                        for (int i = 0; i < width*height; i++)
                        {
                            pointmap[i].color = sf::Color::Black;
                        }
                        generate_mandelbrot_set(pointmap, x_shift, y_shift, precision, zoom);
                    }
                    window.clear();
                    window.draw(pointmap);
                    window.display();
                }
                
                return 0;
            }

        ]]>
        </programlisting>
    </section>                     
                                                                                                                                                                            
    <section>
        <title>Mandelbrot nagyító és utazó Java nyelven</title>
        <para>
            <emphasis role="strong">Ebben a feladatban Lovász Botondot tutoráltam!</emphasis>
        </para>
        <para>
        </para>
        <programlisting language="c">
        <![CDATA[
            import java.awt.*;
            import java.awt.image.BufferedImage;
            import javax.swing.*;
            import java.awt.event.*;
            
            public class Mandelbrot extends JFrame implements ActionListener
            {
            
                private JPanel ctrlPanel;
                private JPanel btnPanel;
                private int numIter = 50;
                private double zoom = 130;
                private double zoomIncrease = 100;
                private int colorIter = 20;
                private BufferedImage I;
                private double zx, zy, cx, cy, temp;
                private int xMove, yMove = 0;
                private JButton[] ctrlBtns = new JButton[9];
                private Color themeColor = new Color(150,180,200);
            
                public Mandelbrot() {
                    super("Mandelbrot Set");
                    setBounds(100, 100, 800, 600);
                    setResizable(false);
                    setDefaultCloseOperation(EXIT_ON_CLOSE);
                    plotPoints();
                    
                    Container contentPane = getContentPane();
                    
                    contentPane.setLayout(null);
                    
                    
                    
                    
                    ctrlPanel = new JPanel();
                    ctrlPanel.setBounds(600,0,200,600);
                    ctrlPanel.setBackground(themeColor);
                    ctrlPanel.setLayout(null);
                    
                    btnPanel = new JPanel();
                    btnPanel.setBounds(0,200,200,200);
                    btnPanel.setLayout(new GridLayout(3,3));
                    btnPanel.setBackground(themeColor);
                    
                    ctrlBtns[1] = new JButton("up");
                    ctrlBtns[7] = new JButton("down");
                    ctrlBtns[3] = new JButton ("left");
                    ctrlBtns[5] = new JButton("right");
                    ctrlBtns[2] = new JButton("+");
                    ctrlBtns[0] = new JButton("-");
                    ctrlBtns[8] = new JButton(">");
                    ctrlBtns[6] = new JButton("<");
                    ctrlBtns[4] = new JButton();
                    
                    contentPane.add(ctrlPanel);
                    contentPane.add(new imgPanel());
                    ctrlPanel.add(btnPanel);
                    
                    for (int x = 0; x<ctrlBtns.length;x++){
                        btnPanel.add(ctrlBtns[x]);
                        ctrlBtns[x].addActionListener(this);
                    }
                    
                    validate();
                    
                }
            
                public class imgPanel extends JPanel{
                    public imgPanel(){
                        setBounds(0,0,600,600);
                        
                    }
                    
                    @Override
                    public void paint (Graphics g){
                        super.paint(g);
                        g.drawImage(I, 0, 0, this);
                    }
                }
                
                public void plotPoints(){
                    I = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_RGB);
                    for (int y = 0; y < getHeight(); y++) {
                        for (int x = 0; x < getWidth(); x++) {
                            zx = zy = 0;
                            cx = (x - 320+xMove) / zoom;
                            cy = (y - 290+yMove) / zoom;
                            int iter = numIter;
                            while (zx * zx + zy * zy < 4 && iter > 0) {
                                temp = zx * zx - zy * zy + cx;
                                zy = 2 * zx * zy + cy;
                                zx = temp;
                                iter--;
                            }
                            I.setRGB(x, y, iter | (iter << colorIter));
                        }
                    }
                }
                
                public void actionPerformed(ActionEvent ae){
                    String event = ae.getActionCommand();
                    
                    switch (event){
                    case "up":
                        yMove-=100;
                        break;
                    case "down":
                        yMove+=100;
                        break;
                    case "left":
                        xMove-=100;
                        break;
                    case "right":
                        xMove+=100;
                        break;
                    case "+":
                        zoom+=zoomIncrease;
                        zoomIncrease+=100;
                        break;
                    case "-":
                        zoom-=zoomIncrease;
                        zoomIncrease-=100;
                        break;
                    case ">":
                        colorIter++;
                        break;
                    case "<":
                        colorIter--;
                        break;
                    }
                    
                    
                    
                    plotPoints();
                    validate();
                    repaint();
                }
                public static void main(String[] args)
                {
                    new Mandelbrot().setVisible(true);
                }
            }
        ]]>
        </programlisting>
        <para>A program az Eclipse gui library-t (swing, awt) használok, ami nagyban segíti az ablakozó rendszer létrejöttét.
        A Mandelbrot osztályt származtatjuk a JFrame osztályból így elérjük a JFram tulajdonságait. A konstrutorba létrehozzuk az ablakot a megfelelő méretekkel illetve felpakoluk a gombokat és a Mandelbrot halmazt megjelenítő ablakocskát.
        A <function>plotPoints()</function> függvény rajzoltatja ki a Mandelbrot halmazt a mb algoritmus alapján. Továbbiakban minden egyes gombok által elérhető eseményekre feliratkozunk és megmondjuk hogy azon eseményre mi történjen.Ilyen eseményekre többnyire a MB halmaz értékeit változtatjuk specifikusan. Például ha nagyítunk vagy kicsinyítünk stb. Minden eseménykor újrageneráltatjuk a MB-halmazt.
        </para>
    </section>

</chapter>                
